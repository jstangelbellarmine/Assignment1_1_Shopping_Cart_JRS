/**
This ShoppingCart class includes methods that are used to create a
ShoppingCart that can hold multiple Items, even of the same type. 
@author John R. Stangel
@version 1.0
*/

public class ShoppingCart implements AbstractShoppingCart {

    private ResizableArrayBag<AbstractItem> carrito;
 
    /**
     * Creates a ShoppingCart with default parameters.
     */
    public ShoppingCart() {
        carrito = new ResizableArrayBag<>();

    }//end empty-argument constructor

    /**
     * Task: states using true/false is shopping cart is empty.
     * @return: boolean result of true if empty, false is otherwise
     */
    @Override
    public boolean isEmpty() {
        return carrito.isEmpty();
    }//end isEmpty

    /**
     * Task: Decides whether the shopping cart contains an item.
     * @return: boolean result of true if item is in shoppingcart, false is otherwise
     */
    @Override
    public boolean containsItem(AbstractItem item) {
        return carrito.contains(item);
    }//end containsItem

    /**
     * Task: measures the number of items in the shoppingcart.
     * @return: integer number of items in shoppingcart
     */
    @Override
    public int getNumItems() {
        return carrito.getCurrentSize();
    }//end getNumItems

    /**
     * Task: adds item to shoppingcart.
     */
    @Override
    public void addItem(AbstractItem item) {
        carrito.add(item);
    }//end addItem

    /**
     * Task: removes a specific item from the shoppingcart.
     */
    @Override
    public void removeItem(AbstractItem item) {
        carrito.remove(item);
    }//end removeItem
    
    /**
     * Task: removes all items from the shoppingcart.
     */
    @Override
    public void emptyCarrito() {
        carrito.clear();
    }//end emptyCarrito

    /**
     * Task: adds prices for all items in the shopping cart.
     * @return price of all items totaled
     * @param price must be at least 0. It it's below 0, price set to 0.
     */
    @Override
    public double getTotalPrice() {
        double totalPrice = 0.0;
        AbstractItem[] items = carrito.toArray();
        for (AbstractItem item : items) 
        {
            totalPrice += item.getItemPrice() * item.getItemQuantity();
        }
        return Math.max(totalPrice, 0.0);  
    }//end getTotalPrice

    /**
     * Task: puts all items in an Array.
     */
    @Override
    public void displayItemList() {
        AbstractItem[] items = carrito.toArray();
        System.out.println("Items in this shopping cart:");
        for (AbstractItem item : items)
        {
            System.out.println("Name: " + item.getName() + ", Price: " + item.getItemPrice() + ", Quantity: " + item.getItemQuantity());
        }
    }//end displayItemList

}//end class
